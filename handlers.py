from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, Contact
from aiogram.filters import Command, StateFilter
from keyboards import keyboard_start, keyboard_main_menu, back_keyboard, buy_keyboard, create_culture_keyboard, \
    create_regions_keyboard, admin_keyboard, get_price, get_culture_keyboard, get_region_keyboard
from crud import add_user, get_users_telegram_ids, add_product_buy, add_product_sell, update_status_product, \
    get_user_id_by_telegram_id, get_user_telegram_id_by_product_id, get_prices_by_culture_and_region_buy, \
    get_prices_by_culture_and_region_sell
from config import CULTURES, REGIONS, ADMIN_ID
from datetime import datetime

router = Router()


class AddUser(StatesGroup):
    phone = State()
    name = State()


def main_menu(count_users):
    text = f'''–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é *AGROCOR Market* üåæ
*–ó–∞—è–≤–æ–∫ –≤ –±–æ—Ç–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*
‚úÖ –Ω–∞ –ø–æ–∫—É–ø–∫—É-1
‚úÖ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É-1

*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
‚û°Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ-{count_users}
‚û°Ô∏è –í—ã—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞—è–≤–∫–∏-1
‚û°Ô∏è –ù–∞–±–ª—é–¥–∞—é—Ç –∑–∞ —Ü–µ–Ω–æ–π-1'''
    return text


@router.message(Command(commands=['start']))
async def start(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    telegram_ids = await get_users_telegram_ids()
    count_users = len(telegram_ids)
    if telegram_id in telegram_ids:
        await message.answer(main_menu(count_users), parse_mode='Markdown',
                             reply_markup=keyboard_main_menu())
    else:
        await message.answer(f'''
{main_menu(count_users)}

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, *–≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏*: 
–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Å—å–±–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –Ω–∏–∂–µ Ô∏è Ô∏è 

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞:
‚òéÔ∏è +79056440180
–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: —Å 10:00 –¥–æ 18:00

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ 
"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"üëá''', parse_mode="Markdown", reply_markup=keyboard_start())
        await state.set_state(AddUser.phone)


@router.message(AddUser.phone)
async def handle_phone(message: Message, state: FSMContext):
    if message.contact:
        phone_number = message.contact.phone_number  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Contact
    else:
        phone_number = message.text

    await state.update_data(phone=phone_number)
    await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ(–§–ò–û):',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddUser.name)


@router.message(AddUser.name)
async def handle_name(message: Message, state: FSMContext):
    user_name = message.text
    await state.update_data(name=user_name)

    telegram_id = message.from_user.id
    user_data = await state.get_data()
    telegram_ids = await get_users_telegram_ids()
    count_users = len(telegram_ids)

    await add_user(user_data['phone'], user_data['name'], telegram_id)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    await message.answer(main_menu(count_users), parse_mode='Markdown', reply_markup=keyboard_main_menu())
    await state.clear()


# analytics, prices, buy, subscription, instruction, urls

@router.callback_query(F.data == 'instruction')
async def handle_instruction(callback_query: CallbackQuery):
    await callback_query.message.answer('''
–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞:

‚òéÔ∏è +79056440180

*–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:* —Å 10:00 –¥–æ 18:00''', parse_mode='Markdown', reply_markup=back_keyboard())


@router.callback_query(F.data == 'urls')
async def handle_urls(callback_query: CallbackQuery):
    await callback_query.message.answer('''
üîó **–°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏**:

üì∞ **–ù–æ–≤–æ—Å—Ç–∏**  
[–ü–µ—Ä–µ–π—Ç–∏ –≤ Agrocor News](https://t.me/agrocornews_channel)

ü§ñ **–ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç**  
[–ü–µ—Ä–µ–π—Ç–∏ Agrocor Assistant Bot](https://t.me/agrocorassistant_bot)

üö¢ **Vessel Catcher**  
[–ü–µ—Ä–µ–π—Ç–∏ –≤ Vessel Catcher](https://t.me/+AqsaM2xqhS44NDQy)

üì¨ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**  
[–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Agrocor](https://t.me/+Qo-k-cCWpb9hMGIy)

üìù **–ó–∞–ø—Ä–æ—Å—ã**  
[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø—Ä–æ—Å–∞–º Agrocor](https://t.me/+xFOPd8ApOjVmNmFi)
    ''', parse_mode="Markdown", disable_web_page_preview=True, reply_markup=back_keyboard())


@router.callback_query(F.data == 'main_menu')
async def main_menu_panel(callback_query: CallbackQuery):
    telegram_ids = await get_users_telegram_ids()
    count_users = len(telegram_ids)
    await callback_query.message.answer(main_menu(count_users), parse_mode="Markdown",
                                        reply_markup=keyboard_main_menu())


@router.callback_query(F.data == 'analytics')
async def analytics(callback_query: CallbackQuery):
    await callback_query.message.answer('''
üìä–†–∞–∑–¥–µ–ª "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"

–í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Å –≤—ã–≤–æ–¥–∞–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤:

üëâ[–ü–ï–†–ï–ô–¢–ò –ö –ê–ù–ê–õ–ò–¢–ò–ö–ï...](https://t.me/agrocornews_channel)
–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä: —Ä—ã–Ω–æ–∫ –∑–µ—Ä–Ω–æ–≤—ã—Ö –∏ –º–∞—Å–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –≤ –†–æ—Å—Å–∏–∏ –∏ –º–∏—Ä–µüåè
''', parse_mode="Markdown", reply_markup=back_keyboard(), disable_web_page_preview=True)


@router.callback_query(F.data == 'buy')
async def buy(callback_query: CallbackQuery, state: FSMContext):
    # telegram_id = callback_query.from_user.id
    await callback_query.message.answer('''
üõí *–†–∞–∑–¥–µ–ª "–ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–∞—Ç—å"*
–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä.
---
*–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É*  
–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ.
---
*–ú–æ–∏ –∑–∞—è–≤–∫–∏*  
–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.  
–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –∑–∞—è–≤–∫–∞–º.
---
Ô∏è Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ üëá
''', parse_mode="Markdown", disable_web_page_preview=True, reply_markup=buy_keyboard())


class AddBuy(StatesGroup):
    name = State()
    location = State()
    date_at = State()
    price_up = State()
    price_down = State()


@router.callback_query(F.data.startswith('key_'))
async def key_buy(callback_query: CallbackQuery, state: FSMContext):
    key = callback_query.data.split('_')[1]
    await state.update_data(action=key)
    if key == 'buyers':
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª *–ö—É–ø–∏—Ç—å*', parse_mode="Markdown", )
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:',
                                            reply_markup=create_culture_keyboard(CULTURES))
    elif key == 'sellers':
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª *–ü—Ä–æ–¥–∞—Ç—å*', parse_mode="Markdown")

        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:',
                                            reply_markup=create_culture_keyboard(CULTURES))
    await state.set_state(AddBuy.name)


@router.callback_query(F.data.startswith('culture_'))
async def culture(callback_query: CallbackQuery, state: FSMContext):
    culture_hash = callback_query.data.split('_')[1]

    # –ù–∞–π–¥–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É –ø–æ —Ö—ç—à—É (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥)
    culture = next(c for c in CULTURES if str(hash(c)) == culture_hash)
    await state.update_data(name=culture)
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{culture}*.\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", parse_mode='Markdown',
                                        reply_markup=create_regions_keyboard(REGIONS))
    await state.set_state(AddBuy.location)


@router.callback_query(F.data.startswith('region_'))
async def input_location(callback_query: CallbackQuery, state: FSMContext):
    location_hash = callback_query.data.split('_')[1]

    # –ù–∞–π–¥–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É –ø–æ —Ö—ç—à—É (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥)
    location = next(c for c in REGIONS if str(hash(c)) == location_hash)
    await state.update_data(location=location)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú.–ì–ì–ì–ì)")
    await state.set_state(AddBuy.date_at)


@router.message(AddBuy.date_at)
async def input_date_at(message: Message, state: FSMContext):
    try:
        date_at = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(date_at=date_at)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:")
        await state.set_state(AddBuy.price_up)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú.–ì–ì–ì–ì.")


@router.message(AddBuy.price_up)
async def input_price_up(message: Message, state: FSMContext):
    price_up = int(message.text)
    await state.update_data(price_up=price_up)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:")
    await state.set_state(AddBuy.price_down)


@router.message(AddBuy.price_down)
async def input_price_down(message: Message, state: FSMContext, bot):
    price_down = int(message.text)
    user_data = await state.get_data()
    await state.update_data(price_down=price_down)
    user_id = await get_user_id_by_telegram_id(message.from_user.id)
    if user_data['action'] == 'buyers':
        product_id = await add_product_buy(name=user_data['name'], location=user_data['location'],
                                           date_at=user_data['date_at'],
                                           price_up=user_data['price_up'],
                                           price_down=price_down,
                                           user_id=user_id, )
    else:
        product_id = await add_product_sell(name=user_data['name'], location=user_data['location'],
                                            date_at=user_data['date_at'],
                                            price_up=user_data['price_up'],
                                            price_down=price_down,
                                            user_id=user_id, )
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! üéâ")
    for admin in ADMIN_ID:
        publish = '*–ö–£–ü–ò–¢–¨*' if user_data['action'] == 'buyers' else '*–ü–†–û–î–ê–¢–¨*'
        await message.bot.send_message(chat_id=admin,
                                       text='–ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è!üéâ\n\n'
                                            f'{publish}\n'
                                            f'üåæ–ö—É–ª—å—Ç—É—Ä–∞: {user_data['name']}\n'
                                            f'üåê–†–µ–≥–∏–æ–Ω: {user_data['location']}\n'
                                            f'--------------\n'
                                            f'–ù–∞ –¥–∞—Ç—É {user_data["date_at"].strftime("%d.%m.%Y")}:\n'
                                            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {price_down}\n'
                                            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {user_data["price_up"]}\n'
                                            f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {round((user_data["price_up"] + price_down) / 2)}',
                                       parse_mode='Markdown',
                                       reply_markup=admin_keyboard(product_id, 'ProductBuy' if user_data[
                                                                                                   'action'] == 'buyers' else 'ProductSell')
                                       )
    await state.clear()


@router.callback_query(F.data.startswith('approved_'))
async def admin_approved(callback_query: CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    table = callback_query.data.split('_')[2]
    await update_status_product(product_id, 'approved', table)
    user_telegram_id = await get_user_telegram_id_by_product_id(product_id, table)
    if user_telegram_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.bot.send_message(
            chat_id=user_telegram_id,
            text=f"–í–∞—à –ø–æ—Å—Ç –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! ‚úÖ"
        )
    await callback_query.answer("–ü–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")


@router.callback_query(F.data.startswith('cancel_'))
async def admin_approved(callback_query: CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    table = callback_query.data.split('_')[2]
    await update_status_product(product_id, 'cancel', table)
    user_telegram_id = await get_user_telegram_id_by_product_id(product_id, table)
    if user_telegram_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.bot.send_message(
            chat_id=user_telegram_id,
            text=f"–í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚ùå"
        )
    await callback_query.answer("–ü–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")


@router.callback_query(F.data == 'prices')
async def prices_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer('''
üåæ –†–∞–∑–¥–µ–ª *"–¶–µ–Ω—ã"* üåæ
–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å *–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏* –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö.

üìç *–î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*

–¶–µ–Ω—ã –≤ *—Ä–∞–∑—Ä–µ–∑–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è*
*–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏* –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
üîé –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å *–≤—ã–≥–æ–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è!*''', parse_mode='Markdown',
                                        reply_markup=get_price())


class GetProduct(StatesGroup):
    name = State()
    location = State()


@router.callback_query(F.data == 'keyboard_price')
async def get_culture(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã:', reply_markup=get_culture_keyboard(CULTURES))
    await state.set_state(GetProduct.name)


@router.callback_query(GetProduct.name)
async def get_region(callback_query: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É
    culture = [culture for culture in CULTURES if f"cult_{hash(culture)}" == callback_query.data][0]
    await state.update_data(culture=culture)
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–≥–∏–æ–Ω
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=get_region_keyboard(REGIONS))
    await state.set_state(GetProduct.location)


@router.callback_query(F.data.startswith("reg_"))
async def show_prices(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    region = [region for region in REGIONS if f"reg_{hash(region)}" == callback_query.data][0]
    user_data = await state.get_data()
    culture = user_data["culture"]

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫—É–ª—å—Ç—É—Ä–µ –∏ —Ä–µ–≥–∏–æ–Ω—É
    prices_buy = await get_prices_by_culture_and_region_buy(culture, region)
    message_buy = f"üìä *–ö–£–ü–õ–Ø*\n–ö—É–ª—å—Ç—É—Ä–∞ '{culture}'\n–†–µ–≥–∏–æ–Ω–µ '{region}'\n"
    if prices_buy:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏
        for price_buy in prices_buy:
            message_buy += (
                f"----------------\n"
                f"*–ù–∞ –¥–∞—Ç—É {price_buy.date_at.strftime('%d.%m.%Y')}:*\n"
                f"–¶–µ–Ω–∞ –º–∏–Ω: {price_buy.price_down}\n"
                f"–¶–µ–Ω–∞ –º–∞–∫—Å: {price_buy.price_up}\n"
                f"–¶–µ–Ω–∞ —Å–µ—Ä: {price_buy.price_middle}\n"
                f"----------------\n\n"
            )
    await callback_query.message.answer(message_buy, parse_mode="Markdown")

    prices_sell = await get_prices_by_culture_and_region_sell(culture, region)
    # print(prices_sell)
    message_sell = f"üìä *–ü–†–û–î–ê–ñ–ê*\n–ö—É–ª—å—Ç—É—Ä–∞ '{culture}'\n–†–µ–≥–∏–æ–Ω–µ '{region}'\n"
    if prices_sell:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏
        for price_sell in prices_sell:
            message_sell += (

                f"*–ù–∞ –¥–∞—Ç—É {price_sell.date_at.strftime('%d.%m.%Y')}:*\n"
                f"–¶–µ–Ω–∞ –º–∏–Ω: {price_sell.price_down}\n"
                f"–¶–µ–Ω–∞ –º–∞–∫—Å: {price_sell.price_up}\n"
                f"–¶–µ–Ω–∞ —Å–µ—Ä: {price_sell.price_middle}\n"
                f"----------------\n\n"
            )
    await callback_query.message.answer(message_sell, parse_mode="Markdown")
