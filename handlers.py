import asyncio
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from keyboards import keyboard_start, keyboard_main_menu, back_keyboard, buy_keyboard, create_culture_keyboard, \
    create_regions_keyboard, admin_keyboard, get_price, get_culture_keyboard, get_region_keyboard, contact_trader, \
    subscription_keyboard, create_vat_keyboard, change_region_keyboard, create_finish_button
from crud import add_user, get_users_telegram_ids, add_product_buy, add_product_sell, update_status_product, \
    get_user_id_by_telegram_id, get_user_telegram_id_by_product_id, get_prices_by_culture_and_region_buy, \
    get_prices_by_culture_and_region_sell, subscribe_decision, get_subscribed_users, get_product, get_statistics, \
    get_regions_for_culture, get_available_cultures, get_unique_regions, get_approved_products, update_post_status
from config import CULTURES, REGIONS, ADMIN_ID
from datetime import datetime, date
from aiocache import cached

router = Router()


class AddUser(StatesGroup):
    phone = State()
    name = State()


@cached(ttl=5)  # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
async def get_cached_statistics():
    return await get_statistics()


async def main_menu():
    total_users, total_buy_requests, total_sell_requests, active_users, subscribed_users = await get_cached_statistics()
    text = f'''–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é *AGROCOR Market* üåæ
üìä*–ó–∞—è–≤–æ–∫ –≤ –±–æ—Ç–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*
‚úÖ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {total_buy_requests}
‚úÖ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {total_sell_requests}

*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
‚û°Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}
‚û°Ô∏è –í—ã—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞—è–≤–∫–∏: {active_users}
‚û°Ô∏è –ù–∞–±–ª—é–¥–∞—é—Ç –∑–∞ —Ü–µ–Ω–∞–º–∏: {subscribed_users}'''
    return text


@router.message(Command(commands=['start']))
async def start(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    telegram_ids = await get_users_telegram_ids()
    text = await main_menu()
    if telegram_id in telegram_ids:
        await message.answer(text, parse_mode='Markdown',
                             reply_markup=keyboard_main_menu())
    else:
        await message.answer(f'''
{text}

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, *–≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏*: 
–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Å—å–±–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –Ω–∏–∂–µ Ô∏è Ô∏è 

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞:
‚òéÔ∏è +79056440180
–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: —Å 10:00 –¥–æ 18:00

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ 
"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"üëá''', parse_mode="Markdown", reply_markup=keyboard_start())
        await state.set_state(AddUser.phone)


@router.message(AddUser.phone)
async def handle_phone(message: Message, state: FSMContext):
    if message.contact:
        phone_number = message.contact.phone_number  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Contact
    else:
        phone_number = message.text

    await state.update_data(phone=phone_number)
    await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ(–§–ò–û):',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddUser.name)


@router.message(AddUser.name)
async def handle_name(message: Message, state: FSMContext):
    user_name = message.text
    await state.update_data(name=user_name)

    telegram_id = message.from_user.id
    user_data = await state.get_data()
    text = await main_menu()
    await add_user(user_data['phone'], user_data['name'], telegram_id)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    await message.answer(text, parse_mode='Markdown', reply_markup=keyboard_main_menu())
    await state.clear()


# analytics, prices, buy, subscription, instruction, urls

@router.callback_query(F.data == 'instruction')
async def handle_instruction(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    if telegram_id in ADMIN_ID:
        product_buy_results, product_sell_results = await get_approved_products()


        # –ü—Ä–æ–π–¥—ë–º—Å—è –ø–æ –∑–∞–ø–∏—Å—è–º –Ω–∞ –ø–æ–∫—É–ø–∫—É
        for product in product_buy_results:
            message = (f"*–ü–û–ö–£–ü–ö–ê*\n"
                       f"üåæ *–ö—É–ª—å—Ç—É—Ä–∞:* {product.name}\n"
                        f"üìç *–†–µ–≥–∏–æ–Ω:* {product.region}, {product.district}, {product.city}\n"
                        f"üìÑ *–û–±—ä–µ–º:* {product.volume} –ú–¢\n"
                        f"üìÖ *–î–∞—Ç–∞:* {product.date_at.strftime('%d.%m.%Y')}\n"
                        f"üí∞ *–¶–µ–Ω–∞:* {product.price} –†—É–±/–ú–¢")
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await callback_query.message.answer(
                message,
                parse_mode='Markdown',
                reply_markup=create_finish_button('buy', product.id)
            )

        # –ü—Ä–æ–π–¥—ë–º—Å—è –ø–æ –∑–∞–ø–∏—Å—è–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        for product in product_sell_results:
            message = (f"*–ü–†–û–î–ê–ñ–ê*\n"
                       f"üåæ *–ö—É–ª—å—Ç—É—Ä–∞:* {product.name}\n"
                        f"üìç *–†–µ–≥–∏–æ–Ω:* {product.region}, {product.district}, {product.city}\n"
                        f"üìÑ *–û–±—ä–µ–º:* {product.volume} –ú–¢\n"
                        f"üìÖ *–î–∞—Ç–∞:* {product.date_at.strftime('%d.%m.%Y')}\n"
                        f"üí∞ *–¶–µ–Ω–∞:* {product.price} –†—É–±/–ú–¢")
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await callback_query.message.answer(
                message,
                parse_mode='Markdown',
                reply_markup=create_finish_button('sell', product.id)
            )
        return
    await callback_query.message.answer('''
–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞:

‚òéÔ∏è +79056440180

*–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:* —Å 10:00 –¥–æ 18:00''', parse_mode='Markdown', reply_markup=back_keyboard())


@router.callback_query(F.data.startswith("finish_"))
async def finish_post(callback_query: CallbackQuery):
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    callback_data = callback_query.data.split("_")
    post_type = callback_data[1]  # –¢–∏–ø –ø–æ—Å—Ç–∞ ('buy' –∏–ª–∏ 'sell')
    post_id = int(callback_data[2])  # ID –∑–∞–ø–∏—Å–∏
    table = 'ProductBuy' if post_type == 'buy' else 'ProductSell'
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ "access"
    await update_post_status(post_type, post_id)
    subscribed_users = await get_subscribed_users()
    product = await get_product(post_id, table)
    if product:
        post_message = (
            f"üì¢ *–ü–†–û–î–ê–ù–û!*\n\n"
            f"üåæ *–ö—É–ª—å—Ç—É—Ä–∞:* {product.name}\n"
            f"üìç *–†–µ–≥–∏–æ–Ω:* {product.region}, {product.district}, {product.city}\n"
            f"üìÖ *–î–∞—Ç–∞:* {product.date_at.strftime('%d.%m.%Y')}\n"
            f"üìÑ *–û–±—ä–µ–º –ø–∞—Ä—Ç–∏–∏:* {product.volume} –ú–¢\n"
            f"üí∞ *–¶–µ–Ω–∞:* {product.price} –†—É–±/–ú–¢"
        )
        for subscriber in subscribed_users:
            await callback_query.bot.send_message(
                chat_id=subscriber,
                text=post_message,
                parse_mode="Markdown"
            )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await callback_query.answer("–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞ 'access'.")


@router.callback_query(F.data == 'urls')
async def handle_urls(callback_query: CallbackQuery):
    await callback_query.message.answer('''
üîó **–°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏**:

üì∞ **–ù–æ–≤–æ—Å—Ç–∏**  
[–ü–µ—Ä–µ–π—Ç–∏ –≤ Agrocor News](https://t.me/agrocornews_channel)

ü§ñ **–ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç**  
[–ü–µ—Ä–µ–π—Ç–∏ Agrocor Assistant Bot](https://t.me/agrocorassistant_bot)

üö¢ **Vessel Catcher**  
[–ü–µ—Ä–µ–π—Ç–∏ –≤ Vessel Catcher](https://t.me/+AqsaM2xqhS44NDQy)

üì¨ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**  
[–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Agrocor](https://t.me/+Qo-k-cCWpb9hMGIy)

üìù **–ó–∞–ø—Ä–æ—Å—ã**  
[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø—Ä–æ—Å–∞–º Agrocor](https://t.me/+xFOPd8ApOjVmNmFi)
    ''', parse_mode="Markdown", disable_web_page_preview=True, reply_markup=back_keyboard())


@router.callback_query(F.data == 'main_menu')
async def main_menu_panel(callback_query: CallbackQuery):
    text = await main_menu()
    await callback_query.message.answer(text, parse_mode="Markdown",
                                        reply_markup=keyboard_main_menu())


@router.callback_query(F.data == 'analytics')
async def analytics(callback_query: CallbackQuery):
    await callback_query.message.answer('''
üìä–†–∞–∑–¥–µ–ª "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"

–í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Å –≤—ã–≤–æ–¥–∞–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤:

üëâ[–ü–ï–†–ï–ô–¢–ò –ö –ê–ù–ê–õ–ò–¢–ò–ö–ï...](https://t.me/agrocornews_channel)
–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä: —Ä—ã–Ω–æ–∫ –∑–µ—Ä–Ω–æ–≤—ã—Ö –∏ –º–∞—Å–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –≤ –†–æ—Å—Å–∏–∏ –∏ –º–∏—Ä–µüåè
''', parse_mode="Markdown", reply_markup=back_keyboard(), disable_web_page_preview=True)


@router.callback_query(F.data == 'buy')
async def buy(callback_query: CallbackQuery, state: FSMContext):
    # telegram_id = callback_query.from_user.id
    await callback_query.message.answer('''
üõí *–†–∞–∑–¥–µ–ª "–ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–∞—Ç—å"*
–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä.
---
*–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É*  
–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ.
---
*–ú–æ–∏ –∑–∞—è–≤–∫–∏*  
–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.  
–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –∑–∞—è–≤–∫–∞–º.
---
Ô∏è Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ üëá
''', parse_mode="Markdown", disable_web_page_preview=True, reply_markup=buy_keyboard())


@router.callback_query(F.data == 'subscription')
async def subscription(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "üåæ *–•–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä?*\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏ –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –∑–Ω–∞—Ç—å –æ *—Å–≤–µ–∂–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö* –Ω–∞ —Ä—ã–Ω–∫–µ *–∫—É–ø–ª–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏* –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä!",
        parse_mode="Markdown", reply_markup=subscription_keyboard()
    )


@router.callback_query(F.data == 'approve_subscription')
async def approve_subscription(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    await subscribe_decision(telegram_id, 'Yes')
    await callback_query.message.answer('–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!')
    text = await main_menu()
    await callback_query.message.answer(text, parse_mode="Markdown",
                                        reply_markup=keyboard_main_menu())


@router.callback_query(F.data == 'cancel_subscription')
async def approve_subscription(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    await subscribe_decision(telegram_id, 'No')
    await callback_query.message.answer('–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!')
    text = await main_menu()
    await callback_query.message.answer(text, parse_mode="Markdown",
                                        reply_markup=keyboard_main_menu())


class AddBuySell(StatesGroup):
    name = State()
    region = State()
    district = State()
    city = State()
    vat_required = State()
    other_quality = State()
    date_at = State()
    volume = State()
    price = State()


@router.callback_query(F.data.startswith('key_'))
async def key_buy(callback_query: CallbackQuery, state: FSMContext):
    key = callback_query.data.split('_')[1]
    await state.update_data(action=key)
    if key == 'buyers':
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª *–ö—É–ø–∏—Ç—å*', parse_mode="Markdown", )
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:',
                                            reply_markup=create_culture_keyboard(CULTURES))
    elif key == 'sellers':
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª *–ü—Ä–æ–¥–∞—Ç—å*', parse_mode="Markdown")

        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:',
                                            reply_markup=create_culture_keyboard(CULTURES))
    await state.set_state(AddBuySell.name)


@router.callback_query(F.data.startswith('culture_'))
async def culture(callback_query: CallbackQuery, state: FSMContext):
    culture_index = int(callback_query.data.split('_')[1])
    culture = CULTURES[culture_index]
    await state.update_data(name=culture)
    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{culture}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤:\n\n"
        "_–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∂–µ._",
        parse_mode='Markdown',
        reply_markup=change_region_keyboard())


@router.callback_query(F.data.startswith('actual'))
async def actual_region(callback_query: CallbackQuery, state: FSMContext):
    regions = await get_unique_regions()
    await state.update_data(region_type='actual')
    await callback_query.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:", parse_mode='Markdown',
                                        reply_markup=create_regions_keyboard(regions))


@router.callback_query(F.data.startswith('all_region'))
async def actual_region(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(region_type='all')
    await callback_query.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:", parse_mode='Markdown',
                                        reply_markup=create_regions_keyboard(REGIONS))


@router.callback_query(F.data.startswith('region_'))
async def input_region(callback_query: CallbackQuery, state: FSMContext):
    region_index = int(callback_query.data.split('_')[1])
    user_data = await state.get_data()
    if user_data['region_type'] == 'all':
        region = REGIONS[region_index]
    else:
        regions = await get_unique_regions()
        region = regions[region_index]
    await state.update_data(region=region)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω:")
    await state.set_state(AddBuySell.district)


@router.message(AddBuySell.district)
async def input_district(message: Message, state: FSMContext):
    await state.update_data(district=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:")
    await state.set_state(AddBuySell.city)


@router.message(AddBuySell.city)
async def input_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã —Å –ù–î–°?",
                         reply_markup=create_vat_keyboard())
    await state.set_state(AddBuySell.vat_required)


@router.callback_query(F.data.startswith('vat_'))
async def input_vat(callback_query: CallbackQuery, state: FSMContext):
    vat_choice = callback_query.data.split('_')[1]
    await state.update_data(vat_required=vat_choice)
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ–≤–∞—Ä–∞:')
    await state.set_state(AddBuySell.other_quality)


@router.message(AddBuySell.other_quality)
async def other_quality(message: Message, state: FSMContext):
    await state.update_data(other_quality=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞–π–Ω—é—é –≤–æ–∑–º–æ–∂–Ω—É—é –¥–∞—Ç—É –ø–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
    await state.set_state(AddBuySell.date_at)


@router.message(AddBuySell.date_at)
async def input_date_at(message: Message, state: FSMContext):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç date
        date_at = datetime.strptime(message.text, "%d.%m.%Y").date()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = date.today()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        if date_at < today:
            await message.answer(
                "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(date_at=date_at)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –≤ –ú–¢):")
        await state.set_state(AddBuySell.volume)

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")


@router.message(AddBuySell.volume)
async def input_volume(message: Message, state: FSMContext):
    try:
        volume = int(message.text)
        if volume <= 0:
            await message.answer("–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –∑–∞–Ω–æ–≤–æ:")
            return

        await state.update_data(volume=volume)
        user_data = await state.get_data()
        text = "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º –ù–î–° (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –≤ –†—É–±/–ú–¢):" if user_data['vat_required'] == 'Yes' else '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–µ–∑ —É—á–µ—Ç–∞ –ù–î–° (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –≤ –†—É–±/–ú–¢):'
        await message.answer(text)
        await state.set_state(AddBuySell.price)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–±—ä–µ–º–∞ (–≤ –ú–¢):")


@router.message(AddBuySell.price)
async def input_price_buy(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        user_data = await state.get_data()
        print(user_data)
        user_id = await get_user_id_by_telegram_id(message.from_user.id)
        if user_data['action'] == 'buyers':
            product_id = await add_product_buy(
                name=user_data['name'],
                region=user_data['region'],
                district=user_data['district'],
                city=user_data['city'],
                date_at=user_data['date_at'],
                volume=user_data['volume'],
                price=price,
                vat_required=user_data['vat_required'],
                other_quality=user_data['other_quality'],
                user_id=user_id
            )
        elif user_data['action'] == 'sellers':
            product_id = await add_product_sell(
                name=user_data['name'],
                region=user_data['region'],
                district=user_data['district'],
                city=user_data['city'],
                date_at=user_data['date_at'],
                volume=user_data['volume'],
                price=price,
                vat_required=user_data['vat_required'],
                other_quality=user_data['other_quality'],
                user_id=user_id
            )

        await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! üéâ")
        text = await main_menu()
        await message.answer(text, parse_mode='Markdown', reply_markup=keyboard_main_menu())
        action = '–ö–£–ü–ò–¢–¨' if user_data['action'] == 'buyers' else "–ü–†–û–î–ê–¢–¨"
        table = 'ProductBuy' if user_data['action'] == 'buyers' else 'ProductSell'
        for admin in ADMIN_ID:
            await message.bot.send_message(
                chat_id=admin,
                text=f'''–ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è!üéâ

*{action}*
üåæ–ö—É–ª—å—Ç—É—Ä–∞: {user_data['name']}
üåê–û–±–ª–∞—Å—Ç—å: {user_data['region']}
üìç–†–∞–π–æ–Ω: {user_data['district']}
üèòÔ∏è–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {user_data['city']}
üí∞–ù–î–°: {'–î–∞' if user_data['vat_required'] == 'Yes' else '–ù–µ—Ç'}
üìÑ–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {user_data['other_quality']}
--------------
–ù–∞ –¥–∞—Ç—É: {user_data["date_at"].strftime("%d.%m.%Y")}
–û–±—ä–µ–º –ø–∞—Ä—Ç–∏–∏: {user_data['volume']} –ú–¢
{'–¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –ù–î–°' if user_data['vat_required'] == 'Yes' else '–¶–µ–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ –ù–î–°'}: {price} –†—É–±/–ú–¢
''',
                parse_mode='Markdown',
                reply_markup=admin_keyboard(product_id, table)
            )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (*—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ*, –≤ –†—É–±/–ú–¢).", parse_mode="Markdown")


@router.callback_query(F.data.startswith('approved_'))
async def admin_approved(callback_query: CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    table = callback_query.data.split('_')[2]
    await update_status_product(product_id, 'approved', table)

    user_telegram_id = await get_user_telegram_id_by_product_id(product_id, table)
    if user_telegram_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.bot.send_message(
            chat_id=user_telegram_id,
            text=f"–í–∞—à –ø–æ—Å—Ç –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! ‚úÖ"
        )

    subscribed_users = await get_subscribed_users()
    product = await get_product(product_id, table)
    if product:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        category_text = '–ö—É–ø–ª—è' if table == 'ProductBuy' else '–ü—Ä–æ–¥–∞–∂–∞'
        vat_text = '–î–∞' if product.vat_required == 'Yes' else '–ù–µ—Ç'
        price_text = '–¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –ù–î–°' if product.vat_required == 'Yes' else '–¶–µ–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ –ù–î–°'
        date_text = product.date_at.strftime('%d.%m.%Y')
        
        post_message = (
            f"üì¢ *–ù–æ–≤—ã–π –ø–æ—Å—Ç!*\n\n"
            f"üîé *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category_text}\n"
            f"üåæ *–ö—É–ª—å—Ç—É—Ä–∞:* {product.name}\n"
            f"üìç *–†–µ–≥–∏–æ–Ω:* {product.region}\n"
            f"üìç *–†–∞–π–æ–Ω:* {product.district}\n"
            f"üìç *–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:* {product.city}\n"
            f"üìÑ *–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:* {product.other_quality}\n"
            f"üìÖ *–î–∞—Ç–∞:* {date_text}\n"
            f"üí∞ *–ù–î–°:* {vat_text}\n"
            f"üí∞ *–û–±—ä–µ–º –ø–∞—Ä—Ç–∏–∏:* {product.volume} –ú–¢\n"
            f"üí∞ *{price_text}:* {product.price} –†—É–±/–ú–¢"
        )
        
        for subscriber in subscribed_users:
            if subscriber != user_telegram_id:  # –ò—Å–∫–ª—é—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—Ç–∞ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
                await callback_query.bot.send_message(
                    chat_id=subscriber,
                    text=post_message,
                    parse_mode="Markdown"
                )
    await callback_query.answer("–ü–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")


@router.callback_query(F.data.startswith('cancel_'))
async def admin_approved(callback_query: CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    table = callback_query.data.split('_')[2]
    await update_status_product(product_id, 'cancel', table)
    user_telegram_id = await get_user_telegram_id_by_product_id(product_id, table)
    if user_telegram_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.bot.send_message(
            chat_id=user_telegram_id,
            text=f"–í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚ùå"
        )
    await callback_query.answer("–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.")


@router.callback_query(F.data.startswith('close_'))
async def admin_close_product(callback_query: CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    table = callback_query.data.split('_')[2]
    await update_status_product(product_id, 'closed', table)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product = await get_product(product_id, table)
    
    # –ü–æ–ª—É—á–∞–µ–º telegram_id –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞—è–≤–∫–∏
    user_telegram_id = await get_user_telegram_id_by_product_id(product_id, table)
    
    if user_telegram_id and product:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∑–∞—è–≤–∫–∏
        await callback_query.bot.send_message(
            chat_id=user_telegram_id,
            text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω). üéâ"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    subscribed_users = await get_subscribed_users()
    
    if product:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
        category_text = '–ö—É–ø–ª—è' if table == 'ProductBuy' else '–ü—Ä–æ–¥–∞–∂–∞'
        vat_text = '–î–∞' if product.vat_required == 'Yes' else '–ù–µ—Ç'
        price_text = '–¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –ù–î–°' if product.vat_required == 'Yes' else '–¶–µ–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ –ù–î–°'
        date_text = product.date_at.strftime('%d.%m.%Y')
        
        post_message = (
            f"üì¢ *–ü–†–û–î–ê–ù–û!*\n\n"
            f"üîé *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category_text}\n"
            f"üåæ *–ö—É–ª—å—Ç—É—Ä–∞:* {product.name}\n"
            f"üìç *–†–µ–≥–∏–æ–Ω:* {product.region}\n"
            f"üìç *–†–∞–π–æ–Ω:* {product.district}\n"
            f"üìç *–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:* {product.city}\n"
            f"üìÑ *–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:* {product.other_quality}\n"
            f"üìÖ *–î–∞—Ç–∞:* {date_text}\n"
            f"üí∞ *–ù–î–°:* {vat_text}\n"
            f"üí∞ *–û–±—ä–µ–º –ø–∞—Ä—Ç–∏–∏:* {product.volume} –ú–¢\n"
            f"üí∞ *{price_text}:* {product.price} –†—É–±/–ú–¢"
        )
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for subscriber in subscribed_users:
            try:
                await callback_query.bot.send_message(
                    chat_id=subscriber,
                    text=post_message,
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscriber}: {e}")
    
    await callback_query.answer("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–ü—Ä–æ–¥–∞–Ω–æ'.")


@router.callback_query(F.data == 'prices')
async def prices_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer('''
üåæ –†–∞–∑–¥–µ–ª *"–¶–µ–Ω—ã"* üåæ
–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å *–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏* –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö.

üìç *–î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*

–¶–µ–Ω—ã –≤ *—Ä–∞–∑—Ä–µ–∑–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è*
*–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏* –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
üîé –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å *–≤—ã–≥–æ–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è!*''', parse_mode='Markdown',
                                        reply_markup=get_price())


class GetProduct(StatesGroup):
    name = State()
    location = State()


@router.callback_query(F.data == 'keyboard_price')
async def get_culture(callback_query: CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data='price_buy'),
            InlineKeyboardButton(text='–ü—Ä–æ–¥–∞—Ç—å', callback_data='price_sell')
        ],
        [InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='main_menu')]
    ])
    await callback_query.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:',
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith('price_'))
async def select_operation_type(callback_query: CallbackQuery, state: FSMContext):
    operation_type = callback_query.data.split('_')[1]  # buy –∏–ª–∏ sell
    await state.update_data(operation_type=operation_type)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    table = 'ProductBuy' if operation_type == 'buy' else 'ProductSell'
    available_cultures = await get_available_cultures(table)

    if not available_cultures:
        await callback_query.message.answer(
            "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="keyboard_price")]
            ])
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É–ª—å—Ç—É—Ä–∞–º–∏
    await callback_query.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã:',
        reply_markup=get_culture_keyboard(available_cultures)
    )
    await state.set_state(GetProduct.name)


@router.callback_query(F.data.startswith("cult_"))
async def get_region(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É –∏–∑ callback_data
    culture = callback_query.data.split('_', 1)[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    operation_type = user_data.get("operation_type", "buy")
    table = 'ProductBuy' if operation_type == 'buy' else 'ProductSell'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(culture=culture)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    regions = await get_regions_for_culture(culture, table)

    if not regions:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫—É–ª—å—Ç—É—Ä—ã", callback_data="keyboard_price")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        operation_text = "–ø–æ–∫—É–ø–∫–∏" if operation_type == "buy" else "–ø—Ä–æ–¥–∞–∂–∏"
        await callback_query.message.answer(
            f"üö´ –î–ª—è –∫—É–ª—å—Ç—É—Ä—ã *{culture}* –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è {operation_text}. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω—ã –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    region_keyboard = await get_region_keyboard(culture, table)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–≥–∏–æ–Ω
    operation_text = "–ø–æ–∫—É–ø–∫–∏" if operation_type == "buy" else "–ø—Ä–æ–¥–∞–∂–∏"
    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É–ª—å—Ç—É—Ä—É *{culture}* –¥–ª—è {operation_text}.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        parse_mode="Markdown",
        reply_markup=region_keyboard
    )

    await state.set_state(GetProduct.location)


@router.callback_query(F.data.startswith("reg_"))
async def show_prices(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ callback_data
    region = callback_query.data.split('_')[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    culture = user_data["culture"]
    operation_type = user_data.get("operation_type", "buy")

    if operation_type == "buy":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        prices = await get_prices_by_culture_and_region_buy(culture, region)
        operation_text = "–ö–£–ü–õ–Ø"
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–¥–∞–∂–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        prices = await get_prices_by_culture_and_region_sell(culture, region)
        operation_text = "–ü–†–û–î–ê–ñ–ê"

    if prices:
        message = f"üìä *{operation_text}*\nüåæ–ö—É–ª—å—Ç—É—Ä–∞: '{culture}'\nüìç–†–µ–≥–∏–æ–Ω: '{region}'\n"
        for price in prices:
            message += (
                f"----------------\n"
                f"*–ù–∞ –¥–∞—Ç—É {price.date_at.strftime('%d.%m.%Y')}:*\n"
                f"–û–±—ä–µ–º –ø–∞—Ä—Ç–∏–∏: {price.volume} –ú–¢\n"
                f"–¶–µ–Ω–∞ {"—Å —É—á–µ—Ç–æ–º –ù–î–°" if price.vat_required == 'Yes' else '–±–µ–∑ —É—á–µ—Ç–∞ –ù–î–°'}: {price.price} –†—É–±/–ú–¢\n"
                f"–û–±–ª–∞—Å—Ç—å: {price.region}\n"
                f"–†–∞–π–æ–Ω: {price.district}\n"
                f"–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {price.city}\n"
                f"–†–∞–±–æ—Ç–∞ —Å –ù–î–°: {'–î–∞' if price.vat_required == 'Yes' else '–ù–µ—Ç'}\n"
                f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {price.other_quality}\n"
                f"----------------\n\n"
            )
        await callback_query.message.answer(message, parse_mode="Markdown", reply_markup=contact_trader())
    else:
        operation_text_lower = "–ø–æ–∫—É–ø–∫—É" if operation_type == "buy" else "–ø—Ä–æ–¥–∞–∂—É"
        await callback_query.message.answer(
            f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞—è–≤–æ–∫ –Ω–∞ {operation_text_lower} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", 
            reply_markup=contact_trader()
        )
