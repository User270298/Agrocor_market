import asyncio
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from keyboards import keyboard_start, keyboard_main_menu, back_keyboard, buy_keyboard, create_culture_keyboard, \
    create_regions_keyboard, admin_keyboard, get_price, \
    subscription_keyboard, keyboard_basis, keyboard_delivery, get_cult_keyboard, get_keyboard_basis, \
    get_keyboard_basis_region, get_regions_keyboard
from crud import add_user, get_users_telegram_ids, add_product_buy, add_product_sell, update_status_product, \
    get_user_id_by_telegram_id, get_user_telegram_id_by_product_id, \
    subscribe_decision, get_subscribed_users, get_product, get_statistics, get_prices_by_culture_and_region_buy, \
    get_prices_by_culture_and_region_sell
from config import CULTURES, REGIONS, ADMIN_ID
from datetime import datetime, date
from aiocache import cached

router = Router()


class AddUser(StatesGroup):
    phone = State()
    name = State()


@cached(ttl=600)  # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
async def get_cached_statistics():
    return await get_statistics()


async def main_menu():
    total_buy_requests, total_sell_requests, total_users, active_users, subscribed_users = await get_cached_statistics()
    text = f'''–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é *AGROCOR Market* üåæ
üìä*–ó–∞—è–≤–æ–∫ –≤ –±–æ—Ç–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*
‚úÖ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {total_buy_requests}
‚úÖ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {total_sell_requests}

*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
‚û°Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}
‚û°Ô∏è –í—ã—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞—è–≤–∫–∏: {active_users}
‚û°Ô∏è –ù–∞–±–ª—é–¥–∞—é—Ç –∑–∞ —Ü–µ–Ω–∞–º–∏: {subscribed_users}'''
    return text


@router.message(Command(commands=['start']))
async def start(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    telegram_ids = await get_users_telegram_ids()
    text = await main_menu()
    if telegram_id in telegram_ids:
        await message.answer(text, parse_mode='Markdown',
                             reply_markup=keyboard_main_menu())
    else:
        await message.answer(f'''
{text}

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, *–≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏*: 
–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Å—å–±–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –Ω–∏–∂–µ Ô∏è Ô∏è 

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞:
‚òéÔ∏è +79056440180
–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: —Å 10:00 –¥–æ 18:00

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ 
"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"üëá''', parse_mode="Markdown", reply_markup=keyboard_start())
        await state.set_state(AddUser.phone)


@router.message(AddUser.phone)
async def handle_phone(message: Message, state: FSMContext):
    if message.contact:
        phone_number = message.contact.phone_number  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Contact
    else:
        phone_number = message.text

    await state.update_data(phone=phone_number)
    await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ(–§–ò–û):',
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddUser.name)


@router.message(AddUser.name)
async def handle_name(message: Message, state: FSMContext):
    user_name = message.text
    await state.update_data(name=user_name)

    telegram_id = message.from_user.id
    user_data = await state.get_data()
    text = await main_menu()
    await add_user(user_data['phone'], user_data['name'], telegram_id)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    await message.answer(text, parse_mode='Markdown', reply_markup=keyboard_main_menu())
    await state.clear()


# analytics, prices, buy, subscription, instruction, urls

@router.callback_query(F.data == 'instruction')
async def handle_instruction(callback_query: CallbackQuery):
    await callback_query.message.answer('''
–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞:

‚òéÔ∏è +79056440180

*–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:* —Å 10:00 –¥–æ 18:00''', parse_mode='Markdown', reply_markup=back_keyboard())


@router.callback_query(F.data == 'urls')
async def handle_urls(callback_query: CallbackQuery):
    await callback_query.message.answer('''
üîó **–°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏**:

üì∞ **–ù–æ–≤–æ—Å—Ç–∏**  
[–ü–µ—Ä–µ–π—Ç–∏ –≤ Agrocor News](https://t.me/agrocornews_channel)

ü§ñ **–ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç**  
[–ü–µ—Ä–µ–π—Ç–∏ Agrocor Assistant Bot](https://t.me/agrocorassistant_bot)

üö¢ **Vessel Catcher**  
[–ü–µ—Ä–µ–π—Ç–∏ –≤ Vessel Catcher](https://t.me/+AqsaM2xqhS44NDQy)

üì¨ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**  
[–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Agrocor](https://t.me/+Qo-k-cCWpb9hMGIy)

üìù **–ó–∞–ø—Ä–æ—Å—ã**  
[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø—Ä–æ—Å–∞–º Agrocor](https://t.me/+xFOPd8ApOjVmNmFi)
    ''', parse_mode="Markdown", disable_web_page_preview=True, reply_markup=back_keyboard())


@router.callback_query(F.data == 'main_menu')
async def main_menu_panel(callback_query: CallbackQuery):
    text = await main_menu()
    await callback_query.message.answer(text, parse_mode="Markdown",
                                        reply_markup=keyboard_main_menu())


@router.callback_query(F.data == 'analytics')
async def analytics(callback_query: CallbackQuery):
    await callback_query.message.answer('''
üìä–†–∞–∑–¥–µ–ª "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"

–í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Å –≤—ã–≤–æ–¥–∞–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤:

üëâ[–ü–ï–†–ï–ô–¢–ò –ö –ê–ù–ê–õ–ò–¢–ò–ö–ï...](https://t.me/agrocornews_channel)
–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä: —Ä—ã–Ω–æ–∫ –∑–µ—Ä–Ω–æ–≤—ã—Ö –∏ –º–∞—Å–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –≤ –†–æ—Å—Å–∏–∏ –∏ –º–∏—Ä–µüåè
''', parse_mode="Markdown", reply_markup=back_keyboard(), disable_web_page_preview=True)


@router.callback_query(F.data == 'buy')
async def buy(callback_query: CallbackQuery, state: FSMContext):
    # telegram_id = callback_query.from_user.id
    await callback_query.message.answer('''
üõí *–†–∞–∑–¥–µ–ª "–ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–∞—Ç—å"*
–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä.
---
*–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É*  
–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ.
---
*–ú–æ–∏ –∑–∞—è–≤–∫–∏*  
–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.  
–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –∑–∞—è–≤–∫–∞–º.
---
Ô∏è Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ üëá
''', parse_mode="Markdown", disable_web_page_preview=True, reply_markup=buy_keyboard())


@router.callback_query(F.data == 'subscription')
async def subscription(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "üåæ *–•–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä?*\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏ –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –∑–Ω–∞—Ç—å –æ *—Å–≤–µ–∂–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö* –Ω–∞ —Ä—ã–Ω–∫–µ *–∫—É–ø–ª–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏* –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä!",
        parse_mode="Markdown", reply_markup=subscription_keyboard()
    )


@router.callback_query(F.data == 'approve_subscription')
async def approve_subscription(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    await subscribe_decision(telegram_id, 'Yes')
    await callback_query.message.answer('–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!')
    text = await main_menu()
    await callback_query.message.answer(text, parse_mode="Markdown",
                                        reply_markup=keyboard_main_menu())


@router.callback_query(F.data == 'cancel_subscription')
async def approve_subscription(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    await subscribe_decision(telegram_id, 'No')
    await callback_query.message.answer('–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!')
    text = await main_menu()
    await callback_query.message.answer(text, parse_mode="Markdown",
                                        reply_markup=keyboard_main_menu())


class AddBuy(StatesGroup):
    name = State()
    location = State()
    basis = State()
    date_at = State()
    price = State()


@router.callback_query(F.data.startswith('key_'))
async def key_buy(callback_query: CallbackQuery, state: FSMContext):
    key = callback_query.data.split('_')[1]
    await state.update_data(action=key)
    if key == 'buyers':
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª *–ö—É–ø–∏—Ç—å*', parse_mode="Markdown", )
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:',
                                            reply_markup=create_culture_keyboard(CULTURES))
    elif key == 'sellers':
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª *–ü—Ä–æ–¥–∞—Ç—å*', parse_mode="Markdown")

        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:',
                                            reply_markup=create_culture_keyboard(CULTURES))
    await state.set_state(AddBuy.name)


@router.callback_query(F.data.startswith('culture_'))
async def culture(callback_query: CallbackQuery, state: FSMContext):
    culture_index = int(callback_query.data.split('_')[1])  # –ë–µ—Ä–µ–º –∏–Ω–¥–µ–∫—Å
    culture = CULTURES[culture_index]
    await state.update_data(name=culture)
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{culture}*.\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", parse_mode='Markdown',
                                        reply_markup=create_regions_keyboard(REGIONS))
    await state.set_state(AddBuy.location)


@router.callback_query(F.data.startswith('region_'))
async def input_location(callback_query: CallbackQuery, state: FSMContext):
    location_index = int(callback_query.data.split('_')[1])  # –ë–µ—Ä–µ–º –∏–Ω–¥–µ–∫—Å
    location = REGIONS[location_index]
    await state.update_data(location=location)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω

    await callback_query.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±–∞–∑–∏—Å:", parse_mode='Markdown',
                                        reply_markup=keyboard_basis())


@router.callback_query(F.data == 'delivery')
async def delivery(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ '–î–æ—Å—Ç–∞–≤–∫–∞'"""
    user_data = await state.get_data()
    action = user_data.get("action")  # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü?

    if action == 'buyers':  # –ï—Å–ª–∏ "–ö—É–ø–∏—Ç—å" ‚Üí –î–æ—Å—Ç–∞–≤–∫–∞ = None
        await state.update_data(basis=None)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏(–∫—Ä–∞–π–Ω—è—è –¥–∞—Ç–∞)(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú.–ì–ì–ì–ì)")
        await state.set_state(AddBuy.date_at)
    else:  # –ï—Å–ª–∏ "–ü—Ä–æ–¥–∞—Ç—å" ‚Üí –î–æ—Å—Ç–∞–≤–∫–∞ = —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ (–≤—ã–±–æ—Ä –±–∞–∑–∏—Å–∞)
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏:',
                                            reply_markup=await keyboard_delivery(state, REGIONS))


@router.callback_query(F.data == 'pickup')
async def pickup(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ '–°–∞–º–æ–≤—ã–≤–æ–∑'"""
    user_data = await state.get_data()
    action = user_data.get("action")  # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü?

    if action == 'buyers':  # –ï—Å–ª–∏ "–ö—É–ø–∏—Ç—å" ‚Üí –°–∞–º–æ–≤—ã–≤–æ–∑ = –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ (–±–∞–∑–∏—Å)
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:',
                                            reply_markup=await keyboard_delivery(state, REGIONS))
    else:  # –ï—Å–ª–∏ "–ü—Ä–æ–¥–∞—Ç—å" ‚Üí –°–∞–º–æ–≤—ã–≤–æ–∑ = None
        await state.update_data(basis=None)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏(–∫—Ä–∞–π–Ω—è—è –¥–∞—Ç–∞)(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú.–ì–ì–ì–ì)")
        await state.set_state(AddBuy.date_at)


@router.callback_query(F.data.startswith('basis_'))
async def select_basis(callback_query: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–±–∏—Ä–∞–µ—Ç –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö."""
    basis_index = int(callback_query.data.split("_")[1])
    data = await state.get_data()
    selected_basis = data.get("selected_basis", [])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∑–∏—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    basis_options = REGIONS  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –±–∞–∑–∏—Å–æ–≤

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    if basis_options[basis_index] in selected_basis:
        selected_basis.remove(basis_options[basis_index])  # –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω
    else:
        selected_basis.append(basis_options[basis_index])  # –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω

    await state.update_data(selected_basis=selected_basis)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
    await callback_query.message.edit_reply_markup(reply_markup=await keyboard_delivery(state, basis_options))


@router.callback_query(F.data == "confirm_basis")
async def confirm_basis(callback_query: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∞–∑–∏—Å—ã –≤ –ë–î —á–µ—Ä–µ–∑ `;` –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""
    data = await state.get_data()
    selected_basis = data.get("selected_basis", [])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ `;`
    basis_str = ", ".join(selected_basis) if selected_basis else "-"

    await state.update_data(basis=basis_str)

    await callback_query.message.answer(
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∞–∑–∏—Å—ã: {basis_str}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏(–∫—Ä–∞–π–Ω—è—è –¥–∞—Ç–∞)(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú.–ì–ì–ì–ì)")
    await state.set_state(AddBuy.date_at)
    await callback_query.answer()


@router.message(AddBuy.date_at)
async def input_date_at(message: Message, state: FSMContext):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç date
        date_at = datetime.strptime(message.text, "%d.%m.%Y").date()
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = date.today()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        if date_at < today:
            await message.answer(
                "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú.–ì–ì–ì–ì.")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(date_at=date_at)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –†—É–±/–ú–¢(—Å —É—á–µ—Ç–æ–º –ù–î–°)\n*–¢–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:*", parse_mode="Markdown")
            await state.set_state(AddBuy.price)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú.–ì–ì–ì–ì.")


@router.message(AddBuy.price)
async def input_price_down(message: Message, state: FSMContext, bot):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—Ü–µ–Ω–∞ –≤ –†—É–±/–ú–¢(—Å —É—á–µ—Ç–æ–º –ù–î–°)). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    price = int(message.text)
    user_data = await state.get_data()
    await state.update_data(price=price)
    user_id = await get_user_id_by_telegram_id(message.from_user.id)
    if user_data['action'] == 'buyers':
        product_id = await add_product_buy(name=user_data['name'], location=user_data['location'],
                                           date_at=user_data['date_at'],
                                           basis=user_data['basis'],
                                           price=price,
                                           user_id=user_id, )
    else:
        product_id = await add_product_sell(name=user_data['name'], location=user_data['location'],
                                            date_at=user_data['date_at'],
                                            basis=user_data['basis'],
                                            price=price,
                                            user_id=user_id, )
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! üéâ")
    text = await main_menu()
    await message.answer(text, parse_mode='Markdown', reply_markup=keyboard_main_menu())
    for admin in ADMIN_ID:
        publish = '*–ö–£–ü–ò–¢–¨*' if user_data['action'] == 'buyers' else '*–ü–†–û–î–ê–¢–¨*'
        basis = user_data['basis'] if user_data['basis'] is not None else '-'
        await message.bot.send_message(chat_id=admin,
                                       text='–ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è!üéâ\n\n'
                                            f'{publish}\n'
                                            f'üåæ–ö—É–ª—å—Ç—É—Ä–∞: {user_data['name']}\n'
                                            f'üåê–†–µ–≥–∏–æ–Ω: {user_data['location']}\n'
                                            f'üìç–ë–∞–∑–∏—Å: {basis}\n'
                                            f'--------------\n'
                                            f'–ù–∞ –¥–∞—Ç—É {user_data["date_at"].strftime("%d.%m.%Y")}:\n'
                                            f'–¶–µ–Ω–∞ {price} –†—É–±/–ú–¢\n',
                                       parse_mode='Markdown',
                                       reply_markup=admin_keyboard(product_id, 'ProductBuy' if user_data[
                                                                                                   'action'] == 'buyers' else 'ProductSell')
                                       )
    await state.clear()


@router.callback_query(F.data.startswith('approved_'))
async def admin_approved(callback_query: CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    table = callback_query.data.split('_')[2]
    await update_status_product(product_id, 'approved', table)
    user_telegram_id = await get_user_telegram_id_by_product_id(product_id, table)
    if user_telegram_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.bot.send_message(
            chat_id=user_telegram_id,
            text=f"–í–∞—à –ø–æ—Å—Ç –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! ‚úÖ"
        )
    subscribed_users = await get_subscribed_users()
    product = await get_product(product_id, table)
    if product:
        basis = product.basis if product.basis is not None else '-'
        post_message = (
            f"üì¢ *–ù–æ–≤—ã–π –ø–æ—Å—Ç!*\n\n"
            f"üîé *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {'–ö—É–ø–ª—è' if table == 'ProductBuy' else '–ü—Ä–æ–¥–∞–∂–∞'}"
            f"üåæ *–ö—É–ª—å—Ç—É—Ä–∞:* {product.name}\n"
            f"üåê *–†–µ–≥–∏–æ–Ω:* {product.location}\n"
            f'üìç *–ë–∞–∑–∏—Å:* {basis}\n'
            f"üìÖ *–î–∞—Ç–∞:* {product.date_at.strftime('%d.%m.%Y')}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {product.price} –†—É–±/–ú–¢"
        )
        for subscriber in subscribed_users:
            if subscriber != user_telegram_id:  # –ò—Å–∫–ª—é—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—Ç–∞ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
                await callback_query.bot.send_message(
                    chat_id=subscriber,
                    text=post_message,
                    parse_mode="Markdown"
                )
    await callback_query.answer("–ü–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")


@router.callback_query(F.data.startswith('cancel_'))
async def admin_approved(callback_query: CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    table = callback_query.data.split('_')[2]
    await update_status_product(product_id, 'cancel', table)
    user_telegram_id = await get_user_telegram_id_by_product_id(product_id, table)
    if user_telegram_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.bot.send_message(
            chat_id=user_telegram_id,
            text=f"–í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚ùå"
        )
    await callback_query.answer("–ü–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")


@router.callback_query(F.data == 'prices')
async def prices_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer('''
üåæ –†–∞–∑–¥–µ–ª *"–¶–µ–Ω—ã"* üåæ
–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å *–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏* –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö.

üìç *–î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*

–¶–µ–Ω—ã –≤ *—Ä–∞–∑—Ä–µ–∑–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è*
*–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏* –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
üîé –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å *–≤—ã–≥–æ–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è!*''', parse_mode='Markdown',
                                        reply_markup=get_price())


class GetProduct(StatesGroup):
    name = State()
    basis_type = State()
    basis_region = State()
    region = State()


@router.callback_query(F.data == 'keyboard_price')
async def get_culture(callback_query: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫—É–ª—å—Ç—É—Ä—ã"""
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=get_cult_keyboard(CULTURES))
    await state.set_state(GetProduct.name)


#
#
@router.callback_query(F.data.startswith("cu_"))
async def get_basis_type(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –±–∞–∑–∏—Å–∞ (–î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –°–∞–º–æ–≤—ã–≤–æ–∑)"""
    culture_index = int(callback_query.data.split('_')[1])
    culture = CULTURES[culture_index]

    await state.update_data(culture=culture)

    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{culture}*.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–∑–∏—Å–∞:", parse_mode="Markdown",
        reply_markup=get_keyboard_basis()
    )
    await state.set_state(GetProduct.basis_type)


#
#
@router.callback_query(F.data.startswith("type_"))
async def get_basis_region(callback_query: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏/–æ—Ç–≥—Ä—É–∑–∫–∏"""
    basis_type = callback_query.data.split('_')[1]  # 'pickup' –∏–ª–∏ 'delivery'
    await state.update_data(basis_type=basis_type, selected_basis=[])

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:" if basis_type == "delivery" else "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:"

    await callback_query.message.answer(text, reply_markup=await get_keyboard_basis_region(state, REGIONS))
    await state.set_state(GetProduct.basis_region)


#
#
@router.callback_query(F.data.startswith("sis_"))
async def toggle_basis_region(callback_query: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–±–∏—Ä–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏/–æ—Ç–≥—Ä—É–∑–∫–∏"""
    basis_index = int(callback_query.data.split("_")[1])
    data = await state.get_data()

    # Ensure 'selected_basis' key exists, otherwise default to an empty list
    selected_basis = data.get("selected_basis", [])

    basis_options = REGIONS  # List of basis options
    basis_name = basis_options[basis_index]

    # Add or remove the selected region
    if basis_name in selected_basis:
        selected_basis.remove(basis_name)
    else:
        selected_basis.append(basis_name)

    # Update state with the new selected_basis
    await state.update_data(selected_basis=selected_basis)

    # Generate a new keyboard after updating the selection
    new_keyboard = await get_keyboard_basis_region(state, basis_options)

    # Extract current keyboard structure for comparison
    existing_keyboard = callback_query.message.reply_markup

    # Convert both keyboards to lists for proper comparison
    existing_buttons = [[button.text for button in row] for row in existing_keyboard.inline_keyboard] if existing_keyboard else []
    new_buttons = [[button.text for button in row] for row in new_keyboard.inline_keyboard]

    if existing_buttons != new_buttons:  # Only update if there's a difference
        await callback_query.message.edit_reply_markup(reply_markup=new_keyboard)
    else:
        await callback_query.answer()  # Avoid unnecessary alerts



#
@router.callback_query(F.data == "conf_basis")
async def confirm_basis_region(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏/–æ—Ç–≥—Ä—É–∑–∫–∏"""
    data = await state.get_data()
    selected_basis = data.get("selected_basis", [])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –∫–ª—é—á–∞

    basis_str = ", ".join(selected_basis) if selected_basis else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    await state.update_data(basis=basis_str)

    await callback_query.message.answer(f"–ë–∞–∑–∏—Å—ã {basis_str}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:",
                                        reply_markup=get_regions_keyboard(REGIONS))
    await state.set_state(GetProduct.region)


#
#
@router.callback_query(F.data.startswith("gion_"))
async def show_prices(callback_query: CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏–º —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    location_index = int(callback_query.data.split('_')[1])
    region = REGIONS[location_index]

    user_data = await state.get_data()
    culture = user_data["culture"]
    basis = user_data["selected_basis"]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∑–∏—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏–∫–∏

    prices_buy = await get_prices_by_culture_and_region_buy(culture, region,
                                                            basis)
    prices_sell = await get_prices_by_culture_and_region_sell(culture, region,
                                                              basis)
    if not prices_buy:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫—É–ø–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

    if not prices_sell:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
    # print(', '.join(basis))


    if prices_buy:

        message_buy = f"üìä *–ö–£–ü–õ–Ø*\nüåæ *–ö—É–ª—å—Ç—É—Ä–∞:* {culture}\nüåê *–†–µ–≥–∏–æ–Ω:* {region}\nüìç *–ë–∞–∑–∏—Å:* {basis}\n----------------\n\n"
        for price in prices_buy:
            message_buy += f"*–ù–∞ –¥–∞—Ç—É {price.date_at.strftime('%d.%m.%Y')}:*\nüí∞ –¶–µ–Ω–∞: {price.price} –†—É–±/–ú–¢\n----------------\n\n"
        await callback_query.message.answer(message_buy, parse_mode='Markdown')

    if prices_sell:
        message_sell = f"üìä *–ü–†–û–î–ê–ñ–ê*\nüåæ *–ö—É–ª—å—Ç—É—Ä–∞:* {culture}\nüåê *–†–µ–≥–∏–æ–Ω:* {region}\nüìç *–ë–∞–∑–∏—Å:* {basis}\n----------------\n\n"
        for price in prices_sell:
            message_sell += f"*–ù–∞ –¥–∞—Ç—É {price.date_at.strftime('%d.%m.%Y')}:*\nüí∞ –¶–µ–Ω–∞: {price.price} –†—É–±/–ú–¢\n----------------\n\n"
        await callback_query.message.answer(message_sell, parse_mode='Markdown')
    text = await main_menu()
    await callback_query.message.answer(text, reply_markup=keyboard_main_menu(), parse_mode='Markdown')
