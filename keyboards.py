from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext


def keyboard_start():
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    button = KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Äüìû', request_contact=True)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[button]],  # –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


def keyboard_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìä–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data='analytics'),
         InlineKeyboardButton(text='üíµ–¶–µ–Ω—ã', callback_data='prices')],
        [InlineKeyboardButton(text='üõí–ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–∞—Ç—å', callback_data='buy'),
         InlineKeyboardButton(text='üìã–ü–æ–¥–ø–∏—Å–∫–∞', callback_data='subscription')],
        [InlineKeyboardButton(text='‚öôÔ∏è–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instruction'),
         InlineKeyboardButton(text='üîó–°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏', callback_data='urls')]
    ])
    return keyboard


def back_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='main_menu'), ]
    ])
    return keyboard


def buy_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data='key_buyers'),
         InlineKeyboardButton(text='–ü—Ä–æ–¥–∞—Ç—å', callback_data='key_sellers')],
        [InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='main_menu')]
    ])
    return keyboard


def create_culture_keyboard(cultures):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    keyboard_buttons = [
        [InlineKeyboardButton(text=cultures[i], callback_data=f"culture_{i}"),
         InlineKeyboardButton(text=cultures[i + 1], callback_data=f"culture_{i + 1}")]
        if i + 1 < len(cultures) else [InlineKeyboardButton(text=cultures[i], callback_data=f"culture_{i}")]
        for i in range(0, len(cultures), 2)
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def create_regions_keyboard(regions):
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –ø–æ 3 –≤ —Ä—è–¥
    keyboard_buttons = [
        [InlineKeyboardButton(text=regions[i], callback_data=f"region_{i}"),
         InlineKeyboardButton(text=regions[i + 1], callback_data=f"region_{i + 1}"),
         InlineKeyboardButton(text=regions[i + 2], callback_data=f"region_{i + 2}")]
        if i + 2 < len(regions) else
        [InlineKeyboardButton(text=regions[i], callback_data=f"region_{i}"),
         InlineKeyboardButton(text=regions[i + 1], callback_data=f"region_{i + 1}")]
        if i + 1 < len(regions) else
        [InlineKeyboardButton(text=regions[i], callback_data=f"region_{i}")]
        for i in range(0, len(regions), 3)
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def admin_keyboard(product_id: int, table_name: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'approved_{product_id}_{table_name}'
            ),
            InlineKeyboardButton(
                text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'cancel_{product_id}_{table_name}'
            )
        ]
    ])
    return keyboard


def get_culture_keyboard(cultures):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫—É–ª—å—Ç—É—Ä –ø–æ 2 –≤ —Ä—è–¥."""
    keyboard_buttons = [
        [InlineKeyboardButton(text=cultures[i], callback_data=f"cult_{i}"),
         InlineKeyboardButton(text=cultures[i + 1], callback_data=f"cult_{i + 1}")]
        if i + 1 < len(cultures) else [InlineKeyboardButton(text=cultures[i], callback_data=f"cult_{i}")]
        for i in range(0, len(cultures), 2)
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    # keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_buy_keyboard")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def contact_trader():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç—Ä–µ–π–¥–µ—Ä–æ–º", url="https://wa.me/+79094213334")],
        [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ])
    return keyboard


def subscription_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìã–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data='approve_subscription')],
        [InlineKeyboardButton(text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='cancel_subscription')],
        [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ])
    return keyboard


def search_price():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üöõ –î–æ—Å—Ç–∞–≤–∫–∞', callback_data='search_delivery'),
         InlineKeyboardButton(text='üè≠ –°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='search_pickup')],
    ])
    return keyboard


def keyboard_basis():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üöõ –î–æ—Å—Ç–∞–≤–∫–∞', callback_data='delivery'),
         InlineKeyboardButton(text='üè≠ –°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='pickup')],
        [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ])
    return keyboard


async def keyboard_delivery(state: FSMContext, basis):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    data = await state.get_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_basis = data.get("selected_basis", [])  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã

    keyboard_buttons = [
        [
            InlineKeyboardButton(
                text=f"‚úÖ {basis[i]}" if basis[i] in selected_basis else basis[i],
                callback_data=f"basis_{i}"
            ),
            InlineKeyboardButton(
                text=f"‚úÖ {basis[i + 1]}" if i + 1 < len(basis) and basis[i + 1] in selected_basis else basis[i + 1],
                callback_data=f"basis_{i + 1}"
            ) if i + 1 < len(basis) else None,
            InlineKeyboardButton(
                text=f"‚úÖ {basis[i + 2]}" if i + 2 < len(basis) and basis[i + 2] in selected_basis else basis[i + 2],
                callback_data=f"basis_{i + 2}"
            ) if i + 2 < len(basis) else None
        ]
        for i in range(0, len(basis), 3)
    ]

    # –§–∏–ª—å—Ç—Ä—É–µ–º None (—á—Ç–æ–±—ã —Ä—è–¥—ã –±—ã–ª–∏ —Ä–æ–≤–Ω—ã–º–∏)
    keyboard_buttons = [list(filter(None, row)) for row in keyboard_buttons]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" –∏ "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([
        InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="confirm_basis"),
        # InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_delivery_keyboard")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_price():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω', callback_data='keyboard_price')],
        [InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='main_menu')]
    ])
    return keyboard


# ----------------------------------------------------------------------------
def get_cult_keyboard(cultures):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É–ª—å—Ç—É—Ä–∞–º–∏"""
    keyboard_buttons = [
        [
            InlineKeyboardButton(text=cultures[i], callback_data=f"cu_{i}"),
            InlineKeyboardButton(text=cultures[i + 1], callback_data=f"cu_{i + 1}")
        ] if i + 1 < len(cultures) else [InlineKeyboardButton(text=cultures[i], callback_data=f"cu_{i}")]
        for i in range(0, len(cultures), 2)
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_keyboard_basis():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üöõ –î–æ—Å—Ç–∞–≤–∫–∞', callback_data='type_delivery'),
         InlineKeyboardButton(text='üè≠ –°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='type_pickup')],
        # [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ])
    return keyboard


async def get_keyboard_basis_region(state: FSMContext, basis):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    data = await state.get_data()

    # Ensure 'selected_basis' key exists, otherwise default to an empty list
    selected_basis = data.get("selected_basis", [])

    keyboard_buttons = [
        [
            InlineKeyboardButton(
                text=f"‚úÖ {basis[i]}" if basis[i] in selected_basis else basis[i],
                callback_data=f"sis_{i}"
            ),
            InlineKeyboardButton(
                text=f"‚úÖ {basis[i + 1]}" if i + 1 < len(basis) and basis[i + 1] in selected_basis else basis[i + 1],
                callback_data=f"sis_{i + 1}"
            ) if i + 1 < len(basis) else None,
            InlineKeyboardButton(
                text=f"‚úÖ {basis[i + 2]}" if i + 2 < len(basis) and basis[i + 2] in selected_basis else basis[i + 2],
                callback_data=f"sis_{i + 2}"
            ) if i + 2 < len(basis) else None
        ]
        for i in range(0, len(basis), 3)
    ]

    # Remove None values to maintain structure
    keyboard_buttons = [list(filter(None, row)) for row in keyboard_buttons]

    # Add confirmation button
    keyboard_buttons.append([
        InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="conf_basis")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

def get_regions_keyboard(regions):
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –ø–æ 3 –≤ —Ä—è–¥
    keyboard_buttons = [
        [InlineKeyboardButton(text=regions[i], callback_data=f"gion_{i}"),
         InlineKeyboardButton(text=regions[i + 1], callback_data=f"gion_{i + 1}"),
         InlineKeyboardButton(text=regions[i + 2], callback_data=f"gion_{i + 2}")]
        if i + 2 < len(regions) else
        [InlineKeyboardButton(text=regions[i], callback_data=f"gion_{i}"),
         InlineKeyboardButton(text=regions[i + 1], callback_data=f"gion_{i + 1}")]
        if i + 1 < len(regions) else
        [InlineKeyboardButton(text=regions[i], callback_data=f"gion_{i}")]
        for i in range(0, len(regions), 3)
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard